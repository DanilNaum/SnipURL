// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package snipendpoint

import (
	"context"
	"sync"
)

// Ensure, that serviceMock does implement service.
// If this is not the case, regenerate this file with moq.
var _ service = &serviceMock{}

// serviceMock is a mock implementation of service.
//
//	func TestSomethingThatUsesservice(t *testing.T) {
//
//		// make and configure a mocked service
//		mockedservice := &serviceMock{
//			GetURLFunc: func(ctx context.Context, id string) (string, error) {
//				panic("mock out the GetURL method")
//			},
//			SetURLFunc: func(ctx context.Context, url string) (string, error) {
//				panic("mock out the SetURL method")
//			},
//		}
//
//		// use mockedservice in code that requires service
//		// and then make assertions.
//
//	}
type serviceMock struct {
	// GetURLFunc mocks the GetURL method.
	GetURLFunc func(ctx context.Context, id string) (string, error)

	// SetURLFunc mocks the SetURL method.
	SetURLFunc func(ctx context.Context, url string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetURL holds details about calls to the GetURL method.
		GetURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// SetURL holds details about calls to the SetURL method.
		SetURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockGetURL sync.RWMutex
	lockSetURL sync.RWMutex
}

// GetURL calls GetURLFunc.
func (mock *serviceMock) GetURL(ctx context.Context, id string) (string, error) {
	if mock.GetURLFunc == nil {
		panic("serviceMock.GetURLFunc: method is nil but service.GetURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetURL.Lock()
	mock.calls.GetURL = append(mock.calls.GetURL, callInfo)
	mock.lockGetURL.Unlock()
	return mock.GetURLFunc(ctx, id)
}

// GetURLCalls gets all the calls that were made to GetURL.
// Check the length with:
//
//	len(mockedservice.GetURLCalls())
func (mock *serviceMock) GetURLCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetURL.RLock()
	calls = mock.calls.GetURL
	mock.lockGetURL.RUnlock()
	return calls
}

// SetURL calls SetURLFunc.
func (mock *serviceMock) SetURL(ctx context.Context, url string) (string, error) {
	if mock.SetURLFunc == nil {
		panic("serviceMock.SetURLFunc: method is nil but service.SetURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockSetURL.Lock()
	mock.calls.SetURL = append(mock.calls.SetURL, callInfo)
	mock.lockSetURL.Unlock()
	return mock.SetURLFunc(ctx, url)
}

// SetURLCalls gets all the calls that were made to SetURL.
// Check the length with:
//
//	len(mockedservice.SetURLCalls())
func (mock *serviceMock) SetURLCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockSetURL.RLock()
	calls = mock.calls.SetURL
	mock.lockSetURL.RUnlock()
	return calls
}
