// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package snipendpoint

import (
	"context"
	"github.com/DanilNaum/SnipURL/internal/app/service/urlsnipper"
	"sync"
)

// Ensure, that serviceMock does implement service.
// If this is not the case, regenerate this file with moq.
var _ service = &serviceMock{}

// serviceMock is a mock implementation of service.
//
//	func TestSomethingThatUsesservice(t *testing.T) {
//
//		// make and configure a mocked service
//		mockedservice := &serviceMock{
//			GetURLFunc: func(ctx context.Context, id string) (string, error) {
//				panic("mock out the GetURL method")
//			},
//			GetURLsFunc: func(ctx context.Context) ([]*urlsnipper.URL, error) {
//				panic("mock out the GetURLs method")
//			},
//			SetURLFunc: func(ctx context.Context, url string) (string, error) {
//				panic("mock out the SetURL method")
//			},
//			SetURLsFunc: func(ctx context.Context, urls []*urlsnipper.SetURLsInput) (map[string]*urlsnipper.SetURLsOutput, error) {
//				panic("mock out the SetURLs method")
//			},
//		}
//
//		// use mockedservice in code that requires service
//		// and then make assertions.
//
//	}
type serviceMock struct {
	// GetURLFunc mocks the GetURL method.
	GetURLFunc func(ctx context.Context, id string) (string, error)

	// GetURLsFunc mocks the GetURLs method.
	GetURLsFunc func(ctx context.Context) ([]*urlsnipper.URL, error)

	// SetURLFunc mocks the SetURL method.
	SetURLFunc func(ctx context.Context, url string) (string, error)

	// SetURLsFunc mocks the SetURLs method.
	SetURLsFunc func(ctx context.Context, urls []*urlsnipper.SetURLsInput) (map[string]*urlsnipper.SetURLsOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetURL holds details about calls to the GetURL method.
		GetURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetURLs holds details about calls to the GetURLs method.
		GetURLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetURL holds details about calls to the SetURL method.
		SetURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// SetURLs holds details about calls to the SetURLs method.
		SetURLs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Urls is the urls argument value.
			Urls []*urlsnipper.SetURLsInput
		}
	}
	lockGetURL  sync.RWMutex
	lockGetURLs sync.RWMutex
	lockSetURL  sync.RWMutex
	lockSetURLs sync.RWMutex
}

// GetURL calls GetURLFunc.
func (mock *serviceMock) GetURL(ctx context.Context, id string) (string, error) {
	if mock.GetURLFunc == nil {
		panic("serviceMock.GetURLFunc: method is nil but service.GetURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetURL.Lock()
	mock.calls.GetURL = append(mock.calls.GetURL, callInfo)
	mock.lockGetURL.Unlock()
	return mock.GetURLFunc(ctx, id)
}

// GetURLCalls gets all the calls that were made to GetURL.
// Check the length with:
//
//	len(mockedservice.GetURLCalls())
func (mock *serviceMock) GetURLCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetURL.RLock()
	calls = mock.calls.GetURL
	mock.lockGetURL.RUnlock()
	return calls
}

// GetURLs calls GetURLsFunc.
func (mock *serviceMock) GetURLs(ctx context.Context) ([]*urlsnipper.URL, error) {
	if mock.GetURLsFunc == nil {
		panic("serviceMock.GetURLsFunc: method is nil but service.GetURLs was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetURLs.Lock()
	mock.calls.GetURLs = append(mock.calls.GetURLs, callInfo)
	mock.lockGetURLs.Unlock()
	return mock.GetURLsFunc(ctx)
}

// GetURLsCalls gets all the calls that were made to GetURLs.
// Check the length with:
//
//	len(mockedservice.GetURLsCalls())
func (mock *serviceMock) GetURLsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetURLs.RLock()
	calls = mock.calls.GetURLs
	mock.lockGetURLs.RUnlock()
	return calls
}

// SetURL calls SetURLFunc.
func (mock *serviceMock) SetURL(ctx context.Context, url string) (string, error) {
	if mock.SetURLFunc == nil {
		panic("serviceMock.SetURLFunc: method is nil but service.SetURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockSetURL.Lock()
	mock.calls.SetURL = append(mock.calls.SetURL, callInfo)
	mock.lockSetURL.Unlock()
	return mock.SetURLFunc(ctx, url)
}

// SetURLCalls gets all the calls that were made to SetURL.
// Check the length with:
//
//	len(mockedservice.SetURLCalls())
func (mock *serviceMock) SetURLCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockSetURL.RLock()
	calls = mock.calls.SetURL
	mock.lockSetURL.RUnlock()
	return calls
}

// SetURLs calls SetURLsFunc.
func (mock *serviceMock) SetURLs(ctx context.Context, urls []*urlsnipper.SetURLsInput) (map[string]*urlsnipper.SetURLsOutput, error) {
	if mock.SetURLsFunc == nil {
		panic("serviceMock.SetURLsFunc: method is nil but service.SetURLs was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Urls []*urlsnipper.SetURLsInput
	}{
		Ctx:  ctx,
		Urls: urls,
	}
	mock.lockSetURLs.Lock()
	mock.calls.SetURLs = append(mock.calls.SetURLs, callInfo)
	mock.lockSetURLs.Unlock()
	return mock.SetURLsFunc(ctx, urls)
}

// SetURLsCalls gets all the calls that were made to SetURLs.
// Check the length with:
//
//	len(mockedservice.SetURLsCalls())
func (mock *serviceMock) SetURLsCalls() []struct {
	Ctx  context.Context
	Urls []*urlsnipper.SetURLsInput
} {
	var calls []struct {
		Ctx  context.Context
		Urls []*urlsnipper.SetURLsInput
	}
	mock.lockSetURLs.RLock()
	calls = mock.calls.SetURLs
	mock.lockSetURLs.RUnlock()
	return calls
}
