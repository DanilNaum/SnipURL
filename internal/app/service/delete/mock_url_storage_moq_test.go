// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package deleteurl

import (
	"sync"
)

// Ensure, that urlStorageMock does implement urlStorage.
// If this is not the case, regenerate this file with moq.
var _ urlStorage = &urlStorageMock{}

// urlStorageMock is a mock implementation of urlStorage.
//
//	func TestSomethingThatUsesurlStorage(t *testing.T) {
//
//		// make and configure a mocked urlStorage
//		mockedurlStorage := &urlStorageMock{
//			DeleteURLsFunc: func(userID string, ids []string) error {
//				panic("mock out the DeleteURLs method")
//			},
//		}
//
//		// use mockedurlStorage in code that requires urlStorage
//		// and then make assertions.
//
//	}
type urlStorageMock struct {
	// DeleteURLsFunc mocks the DeleteURLs method.
	DeleteURLsFunc func(userID string, ids []string) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteURLs holds details about calls to the DeleteURLs method.
		DeleteURLs []struct {
			// UserID is the userID argument value.
			UserID string
			// Ids is the ids argument value.
			Ids []string
		}
	}
	lockDeleteURLs sync.RWMutex
}

// DeleteURLs calls DeleteURLsFunc.
func (mock *urlStorageMock) DeleteURLs(userID string, ids []string) error {
	if mock.DeleteURLsFunc == nil {
		panic("urlStorageMock.DeleteURLsFunc: method is nil but urlStorage.DeleteURLs was just called")
	}
	callInfo := struct {
		UserID string
		Ids    []string
	}{
		UserID: userID,
		Ids:    ids,
	}
	mock.lockDeleteURLs.Lock()
	mock.calls.DeleteURLs = append(mock.calls.DeleteURLs, callInfo)
	mock.lockDeleteURLs.Unlock()
	return mock.DeleteURLsFunc(userID, ids)
}

// DeleteURLsCalls gets all the calls that were made to DeleteURLs.
// Check the length with:
//
//	len(mockedurlStorage.DeleteURLsCalls())
func (mock *urlStorageMock) DeleteURLsCalls() []struct {
	UserID string
	Ids    []string
} {
	var calls []struct {
		UserID string
		Ids    []string
	}
	mock.lockDeleteURLs.RLock()
	calls = mock.calls.DeleteURLs
	mock.lockDeleteURLs.RUnlock()
	return calls
}
