// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package urlsnipper

import (
	"sync"
)

// Ensure, that deleteServiceMock does implement deleteService.
// If this is not the case, regenerate this file with moq.
var _ deleteService = &deleteServiceMock{}

// deleteServiceMock is a mock implementation of deleteService.
//
//	func TestSomethingThatUsesdeleteService(t *testing.T) {
//
//		// make and configure a mocked deleteService
//		mockeddeleteService := &deleteServiceMock{
//			DeleteFunc: func(userID string, input []string)  {
//				panic("mock out the Delete method")
//			},
//		}
//
//		// use mockeddeleteService in code that requires deleteService
//		// and then make assertions.
//
//	}
type deleteServiceMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(userID string, input []string)

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// UserID is the userID argument value.
			UserID string
			// Input is the input argument value.
			Input []string
		}
	}
	lockDelete sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *deleteServiceMock) Delete(userID string, input []string) {
	if mock.DeleteFunc == nil {
		panic("deleteServiceMock.DeleteFunc: method is nil but deleteService.Delete was just called")
	}
	callInfo := struct {
		UserID string
		Input  []string
	}{
		UserID: userID,
		Input:  input,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	mock.DeleteFunc(userID, input)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockeddeleteService.DeleteCalls())
func (mock *deleteServiceMock) DeleteCalls() []struct {
	UserID string
	Input  []string
} {
	var calls []struct {
		UserID string
		Input  []string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}
