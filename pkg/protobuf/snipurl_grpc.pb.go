// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: snipurl.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnipURLService_CreateShortURL_FullMethodName       = "/snipurl.SnipURLService/CreateShortURL"
	SnipURLService_GetOriginalURL_FullMethodName       = "/snipurl.SnipURLService/GetOriginalURL"
	SnipURLService_CreateShortURLJson_FullMethodName   = "/snipurl.SnipURLService/CreateShortURLJson"
	SnipURLService_BatchCreateShortURLs_FullMethodName = "/snipurl.SnipURLService/BatchCreateShortURLs"
	SnipURLService_GetUserURLs_FullMethodName          = "/snipurl.SnipURLService/GetUserURLs"
	SnipURLService_DeleteUserURLs_FullMethodName       = "/snipurl.SnipURLService/DeleteUserURLs"
	SnipURLService_Ping_FullMethodName                 = "/snipurl.SnipURLService/Ping"
	SnipURLService_GetStats_FullMethodName             = "/snipurl.SnipURLService/GetStats"
)

// SnipURLServiceClient is the client API for SnipURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnipURLServiceClient interface {
	// Создать короткую ссылку (plain text)
	CreateShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*ShortURLResponse, error)
	// Получить оригинальный URL по короткому ID
	GetOriginalURL(ctx context.Context, in *ShortURLID, opts ...grpc.CallOption) (*OriginalURLResponse, error)
	// Создать короткую ссылку (JSON)
	CreateShortURLJson(ctx context.Context, in *JsonShortURLRequest, opts ...grpc.CallOption) (*JsonShortURLResponse, error)
	// Создать короткие ссылки пакетно
	BatchCreateShortURLs(ctx context.Context, in *BatchCreateRequest, opts ...grpc.CallOption) (*BatchCreateResponse, error)
	// Получить все URL пользователя
	GetUserURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserURLsResponse, error)
	// Удалить URL пользователя
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Проверка состояния базы данных
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Получить статистику сервиса
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type snipURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnipURLServiceClient(cc grpc.ClientConnInterface) SnipURLServiceClient {
	return &snipURLServiceClient{cc}
}

func (c *snipURLServiceClient) CreateShortURL(ctx context.Context, in *ShortURLRequest, opts ...grpc.CallOption) (*ShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortURLResponse)
	err := c.cc.Invoke(ctx, SnipURLService_CreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) GetOriginalURL(ctx context.Context, in *ShortURLID, opts ...grpc.CallOption) (*OriginalURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OriginalURLResponse)
	err := c.cc.Invoke(ctx, SnipURLService_GetOriginalURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) CreateShortURLJson(ctx context.Context, in *JsonShortURLRequest, opts ...grpc.CallOption) (*JsonShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsonShortURLResponse)
	err := c.cc.Invoke(ctx, SnipURLService_CreateShortURLJson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) BatchCreateShortURLs(ctx context.Context, in *BatchCreateRequest, opts ...grpc.CallOption) (*BatchCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateResponse)
	err := c.cc.Invoke(ctx, SnipURLService_BatchCreateShortURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) GetUserURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserURLsResponse)
	err := c.cc.Invoke(ctx, SnipURLService_GetUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, SnipURLService_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, SnipURLService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipURLServiceClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, SnipURLService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnipURLServiceServer is the server API for SnipURLService service.
// All implementations must embed UnimplementedSnipURLServiceServer
// for forward compatibility.
type SnipURLServiceServer interface {
	// Создать короткую ссылку (plain text)
	CreateShortURL(context.Context, *ShortURLRequest) (*ShortURLResponse, error)
	// Получить оригинальный URL по короткому ID
	GetOriginalURL(context.Context, *ShortURLID) (*OriginalURLResponse, error)
	// Создать короткую ссылку (JSON)
	CreateShortURLJson(context.Context, *JsonShortURLRequest) (*JsonShortURLResponse, error)
	// Создать короткие ссылки пакетно
	BatchCreateShortURLs(context.Context, *BatchCreateRequest) (*BatchCreateResponse, error)
	// Получить все URL пользователя
	GetUserURLs(context.Context, *emptypb.Empty) (*UserURLsResponse, error)
	// Удалить URL пользователя
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteResponse, error)
	// Проверка состояния базы данных
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	// Получить статистику сервиса
	GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	mustEmbedUnimplementedSnipURLServiceServer()
}

// UnimplementedSnipURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnipURLServiceServer struct{}

func (UnimplementedSnipURLServiceServer) CreateShortURL(context.Context, *ShortURLRequest) (*ShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedSnipURLServiceServer) GetOriginalURL(context.Context, *ShortURLID) (*OriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedSnipURLServiceServer) CreateShortURLJson(context.Context, *JsonShortURLRequest) (*JsonShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURLJson not implemented")
}
func (UnimplementedSnipURLServiceServer) BatchCreateShortURLs(context.Context, *BatchCreateRequest) (*BatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateShortURLs not implemented")
}
func (UnimplementedSnipURLServiceServer) GetUserURLs(context.Context, *emptypb.Empty) (*UserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLs not implemented")
}
func (UnimplementedSnipURLServiceServer) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedSnipURLServiceServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSnipURLServiceServer) GetStats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSnipURLServiceServer) mustEmbedUnimplementedSnipURLServiceServer() {}
func (UnimplementedSnipURLServiceServer) testEmbeddedByValue()                        {}

// UnsafeSnipURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnipURLServiceServer will
// result in compilation errors.
type UnsafeSnipURLServiceServer interface {
	mustEmbedUnimplementedSnipURLServiceServer()
}

func RegisterSnipURLServiceServer(s grpc.ServiceRegistrar, srv SnipURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnipURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnipURLService_ServiceDesc, srv)
}

func _SnipURLService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).CreateShortURL(ctx, req.(*ShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURLID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_GetOriginalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).GetOriginalURL(ctx, req.(*ShortURLID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_CreateShortURLJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).CreateShortURLJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_CreateShortURLJson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).CreateShortURLJson(ctx, req.(*JsonShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_BatchCreateShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).BatchCreateShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_BatchCreateShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).BatchCreateShortURLs(ctx, req.(*BatchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_GetUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).GetUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_GetUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).GetUserURLs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipURLService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipURLServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnipURLService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipURLServiceServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SnipURLService_ServiceDesc is the grpc.ServiceDesc for SnipURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnipURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snipurl.SnipURLService",
	HandlerType: (*SnipURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _SnipURLService_CreateShortURL_Handler,
		},
		{
			MethodName: "GetOriginalURL",
			Handler:    _SnipURLService_GetOriginalURL_Handler,
		},
		{
			MethodName: "CreateShortURLJson",
			Handler:    _SnipURLService_CreateShortURLJson_Handler,
		},
		{
			MethodName: "BatchCreateShortURLs",
			Handler:    _SnipURLService_BatchCreateShortURLs_Handler,
		},
		{
			MethodName: "GetUserURLs",
			Handler:    _SnipURLService_GetUserURLs_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _SnipURLService_DeleteUserURLs_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SnipURLService_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _SnipURLService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snipurl.proto",
}
