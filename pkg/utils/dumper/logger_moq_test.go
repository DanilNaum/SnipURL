// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dumper

import (
	"sync"
)

// Ensure, that loggerMock does implement logger.
// If this is not the case, regenerate this file with moq.
var _ logger = &loggerMock{}

// loggerMock is a mock implementation of logger.
//
//	func TestSomethingThatUseslogger(t *testing.T) {
//
//		// make and configure a mocked logger
//		mockedlogger := &loggerMock{
//			FatalfFunc: func(format string, v ...any)  {
//				panic("mock out the Fatalf method")
//			},
//		}
//
//		// use mockedlogger in code that requires logger
//		// and then make assertions.
//
//	}
type loggerMock struct {
	// FatalfFunc mocks the Fatalf method.
	FatalfFunc func(format string, v ...any)

	// calls tracks calls to the methods.
	calls struct {
		// Fatalf holds details about calls to the Fatalf method.
		Fatalf []struct {
			// Format is the format argument value.
			Format string
			// V is the v argument value.
			V []any
		}
	}
	lockFatalf sync.RWMutex
}

// Fatalf calls FatalfFunc.
func (mock *loggerMock) Fatalf(format string, v ...any) {
	if mock.FatalfFunc == nil {
		panic("loggerMock.FatalfFunc: method is nil but logger.Fatalf was just called")
	}
	callInfo := struct {
		Format string
		V      []any
	}{
		Format: format,
		V:      v,
	}
	mock.lockFatalf.Lock()
	mock.calls.Fatalf = append(mock.calls.Fatalf, callInfo)
	mock.lockFatalf.Unlock()
	mock.FatalfFunc(format, v...)
}

// FatalfCalls gets all the calls that were made to Fatalf.
// Check the length with:
//
//	len(mockedlogger.FatalfCalls())
func (mock *loggerMock) FatalfCalls() []struct {
	Format string
	V      []any
} {
	var calls []struct {
		Format string
		V      []any
	}
	mock.lockFatalf.RLock()
	calls = mock.calls.Fatalf
	mock.lockFatalf.RUnlock()
	return calls
}
